var Dr=Object.defineProperty;var jr=(e,r,t)=>r in e?Dr(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t;var P=(e,r,t)=>jr(e,typeof r!="symbol"?r+"":r,t);import{j as _}from"./index-j6fFZ7Wp.js";import{r as j,i as Ve,g as Lr}from"./vendor-hXyo-ThI.js";import{L as xr}from"./Layout-B13cDkFu.js";import{f as Ir,g as Nr,B as K,d as D,h as q,i as qr,L as Be,I as We,j as $r,W as Vr,k as Br,F as Wr,l as He,m as Hr,n as Mr,M as zr,G as Me,b as Kr,o as Qr,A as Jr}from"./mui-D9bCKA6o.js";import{f as Yr}from"./format-BzRktsyD.js";const Xr=({repo:e})=>_.jsxDEV(Ir,{sx:{height:"100%",display:"flex",flexDirection:"column",bgcolor:"background.paper",transition:"transform 0.2s, box-shadow 0.2s","&:hover":{transform:"translateY(-4px)",boxShadow:r=>`0 4px 20px ${r.palette.primary.dark}40`}},children:_.jsxDEV(Nr,{sx:{flexGrow:1,display:"flex",flexDirection:"column"},children:[_.jsxDEV(K,{sx:{mb:2},children:[_.jsxDEV(D,{variant:"h6",component:"h3",gutterBottom:!0,children:e.name},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:35,columnNumber:11},void 0),_.jsxDEV(D,{variant:"body2",color:"text.secondary",sx:{mb:2},children:e.description||"No description available"},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:38,columnNumber:11},void 0)]},void 0,!0,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:34,columnNumber:9},void 0),_.jsxDEV(K,{sx:{flexGrow:1},children:[e.topics.length>0&&_.jsxDEV(q,{direction:"row",spacing:1,flexWrap:"wrap",sx:{mb:2,gap:1},children:e.topics.map(r=>_.jsxDEV(qr,{label:r,size:"small",sx:{bgcolor:"primary.dark",color:"primary.light","&:hover":{bgcolor:"primary.main"}}},r,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:47,columnNumber:17},void 0))},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:45,columnNumber:13},void 0),e.language&&_.jsxDEV(D,{variant:"body2",color:"text.secondary",sx:{mb:1},children:e.language},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:62,columnNumber:13},void 0)]},void 0,!0,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:43,columnNumber:9},void 0),_.jsxDEV(K,{sx:{mt:2,display:"flex",justifyContent:"space-between",alignItems:"center"},children:[_.jsxDEV(q,{direction:"row",spacing:2,alignItems:"center",children:[_.jsxDEV(Be,{href:e.url,target:"_blank",rel:"noopener noreferrer",color:"inherit",children:_.jsxDEV(We,{size:"small",color:"inherit",children:_.jsxDEV($r,{},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:84,columnNumber:17},void 0)},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:83,columnNumber:15},void 0)},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:77,columnNumber:13},void 0),e.homepage&&_.jsxDEV(Be,{href:e.homepage,target:"_blank",rel:"noopener noreferrer",color:"inherit",children:_.jsxDEV(We,{size:"small",color:"inherit",children:_.jsxDEV(Vr,{},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:95,columnNumber:19},void 0)},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:94,columnNumber:17},void 0)},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:88,columnNumber:15},void 0)]},void 0,!0,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:76,columnNumber:11},void 0),_.jsxDEV(q,{direction:"row",spacing:2,alignItems:"center",children:[e.stars>0&&_.jsxDEV(q,{direction:"row",spacing:.5,alignItems:"center",children:[_.jsxDEV(Br,{fontSize:"small"},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:104,columnNumber:17},void 0),_.jsxDEV(D,{variant:"body2",children:e.stars},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:105,columnNumber:17},void 0)]},void 0,!0,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:103,columnNumber:15},void 0),e.forks>0&&_.jsxDEV(q,{direction:"row",spacing:.5,alignItems:"center",children:[_.jsxDEV(Wr,{fontSize:"small"},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:110,columnNumber:17},void 0),_.jsxDEV(D,{variant:"body2",children:e.forks},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:111,columnNumber:17},void 0)]},void 0,!0,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:109,columnNumber:15},void 0)]},void 0,!0,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:101,columnNumber:11},void 0)]},void 0,!0,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:68,columnNumber:9},void 0),_.jsxDEV(D,{variant:"caption",color:"text.secondary",sx:{mt:2,display:"block",textAlign:"right"},children:["Updated: ",e.updatedAt]},void 0,!0,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:117,columnNumber:9},void 0)]},void 0,!0,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:33,columnNumber:7},void 0)},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryCard.jsx",lineNumber:20,columnNumber:5},void 0),Zr=[{value:"updated",label:"Recently Updated"},{value:"stars",label:"Most Stars"},{value:"forks",label:"Most Forks"},{value:"name",label:"Name"}],es=({repositories:e})=>{const[r,t]=j.useState(""),[n,o]=j.useState("updated"),l=j.useMemo(()=>e.filter(c=>{var m;const d=r.toLowerCase();return c.name.toLowerCase().includes(d)||((m=c.description)==null?void 0:m.toLowerCase().includes(d))||c.topics.some(T=>T.toLowerCase().includes(d))}).sort((c,d)=>{switch(n){case"stars":return d.stars-c.stars;case"forks":return d.forks-c.forks;case"name":return c.name.localeCompare(d.name);case"updated":default:return new Date(d.updatedAt)-new Date(c.updatedAt)}}),[e,r,n]);return _.jsxDEV(K,{children:[_.jsxDEV(q,{direction:{xs:"column",sm:"row"},spacing:2,sx:{mb:4},alignItems:"center",children:[_.jsxDEV(He,{fullWidth:!0,variant:"outlined",placeholder:"Search repositories...",value:r,onChange:c=>t(c.target.value),InputProps:{startAdornment:_.jsxDEV(Hr,{position:"start",children:_.jsxDEV(Mr,{},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryGrid.jsx",lineNumber:69,columnNumber:17},void 0)},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryGrid.jsx",lineNumber:68,columnNumber:15},void 0)},sx:{maxWidth:{sm:"300px"}}},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryGrid.jsx",lineNumber:60,columnNumber:9},void 0),_.jsxDEV(He,{select:!0,value:n,onChange:c=>o(c.target.value),variant:"outlined",sx:{minWidth:"150px"},children:Zr.map(c=>_.jsxDEV(zr,{value:c.value,children:c.label},c.value,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryGrid.jsx",lineNumber:83,columnNumber:13},void 0))},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryGrid.jsx",lineNumber:75,columnNumber:9},void 0)]},void 0,!0,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryGrid.jsx",lineNumber:54,columnNumber:7},void 0),l.length===0?_.jsxDEV(D,{variant:"body1",color:"text.secondary",textAlign:"center",children:"No repositories found matching your search criteria."},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryGrid.jsx",lineNumber:91,columnNumber:9},void 0):_.jsxDEV(Me,{container:!0,spacing:3,children:l.map(c=>_.jsxDEV(Me,{item:!0,xs:12,sm:6,md:4,children:_.jsxDEV(Xr,{repo:c},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryGrid.jsx",lineNumber:98,columnNumber:15},void 0)},c.id,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryGrid.jsx",lineNumber:97,columnNumber:13},void 0))},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryGrid.jsx",lineNumber:95,columnNumber:9},void 0)]},void 0,!0,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/components/portfolio/RepositoryGrid.jsx",lineNumber:53,columnNumber:5},void 0)};function ee(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function me(e,r,t,n){if(typeof t!="function")throw new Error("method for before hook must be a function");return n||(n={}),Array.isArray(r)?r.reverse().reduce((o,l)=>me.bind(null,e,l,o,n),t)():Promise.resolve().then(()=>e.registry[r]?e.registry[r].reduce((o,l)=>l.hook.bind(null,o,n),t)():t(n))}function rs(e,r,t,n){const o=n;e.registry[t]||(e.registry[t]=[]),r==="before"&&(n=(l,c)=>Promise.resolve().then(o.bind(null,c)).then(l.bind(null,c))),r==="after"&&(n=(l,c)=>{let d;return Promise.resolve().then(l.bind(null,c)).then(m=>(d=m,o(d,c))).then(()=>d)}),r==="error"&&(n=(l,c)=>Promise.resolve().then(l.bind(null,c)).catch(d=>o(d,c))),e.registry[t].push({hook:n,orig:o})}function ss(e,r,t){if(!e.registry[r])return;const n=e.registry[r].map(o=>o.orig).indexOf(t);n!==-1&&e.registry[r].splice(n,1)}const ze=Function.bind,Ke=ze.bind(ze);function or(e,r,t){const n=Ke(ss,null).apply(null,t?[r,t]:[r]);e.api={remove:n},e.remove=n,["before","error","after","wrap"].forEach(o=>{const l=t?[r,o,t]:[r,o];e[o]=e.api[o]=Ke(rs,null).apply(null,l)})}function ts(){const e=Symbol("Singular"),r={registry:{}},t=me.bind(null,r,e);return or(t,r,e),t}function os(){const e={registry:{}},r=me.bind(null,e);return or(r,e),r}const ns={Singular:ts,Collection:os};var is="0.0.0-development",as=`octokit-endpoint.js/${is} ${ee()}`,cs={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":as},mediaType:{format:""}};function us(e){return e?Object.keys(e).reduce((r,t)=>(r[t.toLowerCase()]=e[t],r),{}):{}}function ls(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}function nr(e,r){const t=Object.assign({},e);return Object.keys(r).forEach(n=>{ls(r[n])?n in e?t[n]=nr(e[n],r[n]):Object.assign(t,{[n]:r[n]}):Object.assign(t,{[n]:r[n]})}),t}function Qe(e){for(const r in e)e[r]===void 0&&delete e[r];return e}function pe(e,r,t){var o;if(typeof r=="string"){let[l,c]=r.split(" ");t=Object.assign(c?{method:l,url:c}:{url:l},t)}else t=Object.assign({},r);t.headers=us(t.headers),Qe(t),Qe(t.headers);const n=nr(e||{},t);return t.url==="/graphql"&&(e&&((o=e.mediaType.previews)!=null&&o.length)&&(n.mediaType.previews=e.mediaType.previews.filter(l=>!n.mediaType.previews.includes(l)).concat(n.mediaType.previews)),n.mediaType.previews=(n.mediaType.previews||[]).map(l=>l.replace(/-preview/,""))),n}function ps(e,r){const t=/\?/.test(e)?"&":"?",n=Object.keys(r);return n.length===0?e:e+t+n.map(o=>o==="q"?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${o}=${encodeURIComponent(r[o])}`).join("&")}var ds=/\{[^}]+\}/g;function gs(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function ms(e){const r=e.match(ds);return r?r.map(gs).reduce((t,n)=>t.concat(n),[]):[]}function Je(e,r){const t={__proto__:null};for(const n of Object.keys(e))r.indexOf(n)===-1&&(t[n]=e[n]);return t}function ir(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(r){return/%[0-9A-Fa-f]/.test(r)||(r=encodeURI(r).replace(/%5B/g,"[").replace(/%5D/g,"]")),r}).join("")}function $(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(r){return"%"+r.charCodeAt(0).toString(16).toUpperCase()})}function M(e,r,t){return r=e==="+"||e==="#"?ir(r):$(r),t?$(t)+"="+r:r}function I(e){return e!=null}function ae(e){return e===";"||e==="&"||e==="?"}function hs(e,r,t,n){var o=e[t],l=[];if(I(o)&&o!=="")if(typeof o=="string"||typeof o=="number"||typeof o=="boolean")o=o.toString(),n&&n!=="*"&&(o=o.substring(0,parseInt(n,10))),l.push(M(r,o,ae(r)?t:""));else if(n==="*")Array.isArray(o)?o.filter(I).forEach(function(c){l.push(M(r,c,ae(r)?t:""))}):Object.keys(o).forEach(function(c){I(o[c])&&l.push(M(r,o[c],c))});else{const c=[];Array.isArray(o)?o.filter(I).forEach(function(d){c.push(M(r,d))}):Object.keys(o).forEach(function(d){I(o[d])&&(c.push($(d)),c.push(M(r,o[d].toString())))}),ae(r)?l.push($(t)+"="+c.join(",")):c.length!==0&&l.push(c.join(","))}else r===";"?I(o)&&l.push($(t)):o===""&&(r==="&"||r==="?")?l.push($(t)+"="):o===""&&l.push("");return l}function fs(e){return{expand:Es.bind(null,e)}}function Es(e,r){var t=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(n,o,l){if(o){let d="";const m=[];if(t.indexOf(o.charAt(0))!==-1&&(d=o.charAt(0),o=o.substr(1)),o.split(/,/g).forEach(function(T){var E=/([^:\*]*)(?::(\d+)|(\*))?/.exec(T);m.push(hs(r,d,E[1],E[2]||E[3]))}),d&&d!=="+"){var c=",";return d==="?"?c="&":d!=="#"&&(c=d),(m.length!==0?d:"")+m.join(c)}else return m.join(",")}else return ir(l)}),e==="/"?e:e.replace(/\/$/,"")}function ar(e){var E;let r=e.method.toUpperCase(),t=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),n=Object.assign({},e.headers),o,l=Je(e,["method","baseUrl","url","headers","request","mediaType"]);const c=ms(t);t=fs(t).expand(l),/^http/.test(t)||(t=e.baseUrl+t);const d=Object.keys(e).filter(b=>c.includes(b)).concat("baseUrl"),m=Je(l,d);if(!/application\/octet-stream/i.test(n.accept)&&(e.mediaType.format&&(n.accept=n.accept.split(/,/).map(b=>b.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),t.endsWith("/graphql")&&(E=e.mediaType.previews)!=null&&E.length)){const b=n.accept.match(/[\w-]+(?=-preview)/g)||[];n.accept=b.concat(e.mediaType.previews).map(k=>{const w=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${k}-preview${w}`}).join(",")}return["GET","HEAD"].includes(r)?t=ps(t,m):"data"in m?o=m.data:Object.keys(m).length&&(o=m),!n["content-type"]&&typeof o<"u"&&(n["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&typeof o>"u"&&(o=""),Object.assign({method:r,url:t,headers:n},typeof o<"u"?{body:o}:null,e.request?{request:e.request}:null)}function Ts(e,r,t){return ar(pe(e,r,t))}function cr(e,r){const t=pe(e,r),n=Ts.bind(null,t);return Object.assign(n,{DEFAULTS:t,defaults:cr.bind(null,t),merge:pe.bind(null,t),parse:ar})}var _s=cr(null,cs),N={},Ye;function bs(){if(Ye)return N;Ye=1;const e=function(){};e.prototype=Object.create(null);const r=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,t=/\\([\v\u0020-\u00ff])/gu,n=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,o={type:"",parameters:new e};Object.freeze(o.parameters),Object.freeze(o);function l(d){if(typeof d!="string")throw new TypeError("argument header is required and must be a string");let m=d.indexOf(";");const T=m!==-1?d.slice(0,m).trim():d.trim();if(n.test(T)===!1)throw new TypeError("invalid media type");const E={type:T.toLowerCase(),parameters:new e};if(m===-1)return E;let b,k,w;for(r.lastIndex=m;k=r.exec(d);){if(k.index!==m)throw new TypeError("invalid parameter format");m+=k[0].length,b=k[1].toLowerCase(),w=k[2],w[0]==='"'&&(w=w.slice(1,w.length-1),t.test(w)&&(w=w.replace(t,"$1"))),E.parameters[b]=w}if(m!==d.length)throw new TypeError("invalid parameter format");return E}function c(d){if(typeof d!="string")return o;let m=d.indexOf(";");const T=m!==-1?d.slice(0,m).trim():d.trim();if(n.test(T)===!1)return o;const E={type:T.toLowerCase(),parameters:new e};if(m===-1)return E;let b,k,w;for(r.lastIndex=m;k=r.exec(d);){if(k.index!==m)return o;m+=k[0].length,b=k[1].toLowerCase(),w=k[2],w[0]==='"'&&(w=w.slice(1,w.length-1),t.test(w)&&(w=w.replace(t,"$1"))),E.parameters[b]=w}return m!==d.length?o:E}return N.default={parse:l,safeParse:c},N.parse=l,N.safeParse=c,N.defaultContentType=o,N}var ws=bs();class z extends Error{constructor(t,n,o){super(t);P(this,"name");P(this,"status");P(this,"request");P(this,"response");this.name="HttpError",this.status=Number.parseInt(n),Number.isNaN(this.status)&&(this.status=0),"response"in o&&(this.response=o.response);const l=Object.assign({},o.request);o.request.headers.authorization&&(l.headers=Object.assign({},o.request.headers,{authorization:o.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),l.url=l.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=l}}var ys="0.0.0-development",vs={headers:{"user-agent":`octokit-request.js/${ys} ${ee()}`}};function ks(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t=="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}async function Xe(e){var b,k,w,C,A;const r=((b=e.request)==null?void 0:b.fetch)||globalThis.fetch;if(!r)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const t=((k=e.request)==null?void 0:k.log)||console,n=((w=e.request)==null?void 0:w.parseSuccessResponseBody)!==!1,o=ks(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,l=Object.fromEntries(Object.entries(e.headers).map(([v,G])=>[v,String(G)]));let c;try{c=await r(e.url,{method:e.method,body:o,redirect:(C=e.request)==null?void 0:C.redirect,headers:l,signal:(A=e.request)==null?void 0:A.signal,...e.body&&{duplex:"half"}})}catch(v){let G="Unknown Error";if(v instanceof Error){if(v.name==="AbortError")throw v.status=500,v;G=v.message,v.name==="TypeError"&&"cause"in v&&(v.cause instanceof Error?G=v.cause.message:typeof v.cause=="string"&&(G=v.cause))}const S=new z(G,500,{request:e});throw S.cause=v,S}const d=c.status,m=c.url,T={};for(const[v,G]of c.headers)T[v]=G;const E={url:m,status:d,headers:T,data:""};if("deprecation"in T){const v=T.link&&T.link.match(/<([^>]+)>; rel="deprecation"/),G=v&&v.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${T.sunset}${G?`. See ${G}`:""}`)}if(d===204||d===205)return E;if(e.method==="HEAD"){if(d<400)return E;throw new z(c.statusText,d,{response:E,request:e})}if(d===304)throw E.data=await ce(c),new z("Not modified",d,{response:E,request:e});if(d>=400)throw E.data=await ce(c),new z(Ps(E.data),d,{response:E,request:e});return E.data=n?await ce(c):c.body,E}async function ce(e){var n;const r=e.headers.get("content-type");if(!r)return e.text().catch(()=>"");const t=ws.safeParse(r);if(t.type==="application/json"){let o="";try{return o=await e.text(),JSON.parse(o)}catch{return o}}else return t.type.startsWith("text/")||((n=t.parameters.charset)==null?void 0:n.toLowerCase())==="utf-8"?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0))}function Ps(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const r="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(t=>JSON.stringify(t)).join(", ")}${r}`:`${e.message}${r}`}return`Unknown error: ${JSON.stringify(e)}`}function de(e,r){const t=e.defaults(r);return Object.assign(function(o,l){const c=t.merge(o,l);if(!c.request||!c.request.hook)return Xe(t.parse(c));const d=(m,T)=>Xe(t.parse(t.merge(m,T)));return Object.assign(d,{endpoint:t,defaults:de.bind(null,t)}),c.request.hook(d,c)},{endpoint:t,defaults:de.bind(null,t)})}var ge=de(_s,vs),Gs="0.0.0-development";function Rs(e){return`Request failed due to following response errors:
`+e.errors.map(r=>` - ${r.message}`).join(`
`)}var Os=class extends Error{constructor(r,t,n){super(Rs(n));P(this,"name","GraphqlResponseError");P(this,"errors");P(this,"data");this.request=r,this.headers=t,this.response=n,this.errors=n.errors,this.data=n.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},As=["method","baseUrl","url","headers","request","query","mediaType"],Ss=["query","method","url"],Ze=/\/api\/v3\/?$/;function Fs(e,r,t){if(t){if(typeof r=="string"&&"query"in t)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const c in t)if(Ss.includes(c))return Promise.reject(new Error(`[@octokit/graphql] "${c}" cannot be used as variable name`))}const n=typeof r=="string"?Object.assign({query:r},t):r,o=Object.keys(n).reduce((c,d)=>As.includes(d)?(c[d]=n[d],c):(c.variables||(c.variables={}),c.variables[d]=n[d],c),{}),l=n.baseUrl||e.endpoint.DEFAULTS.baseUrl;return Ze.test(l)&&(o.url=l.replace(Ze,"/api/graphql")),e(o).then(c=>{if(c.data.errors){const d={};for(const m of Object.keys(c.headers))d[m]=c.headers[m];throw new Os(o,d,c.data)}return c.data.data})}function he(e,r){const t=e.defaults(r);return Object.assign((o,l)=>Fs(t,o,l),{defaults:he.bind(null,t),endpoint:t.endpoint})}he(ge,{headers:{"user-agent":`octokit-graphql.js/${Gs} ${ee()}`},method:"POST",url:"/graphql"});function Cs(e){return he(e,{method:"POST",url:"/graphql"})}var Us=/^v1\./,Ds=/^ghs_/,js=/^ghu_/;async function Ls(e){const r=e.split(/\./).length===3,t=Us.test(e)||Ds.test(e),n=js.test(e);return{type:"token",token:e,tokenType:r?"app":t?"installation":n?"user-to-server":"oauth"}}function xs(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function Is(e,r,t,n){const o=r.endpoint.merge(t,n);return o.headers.authorization=xs(e),r(o)}var Ns=function(r){if(!r)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof r!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return r=r.replace(/^(token|bearer) +/i,""),Object.assign(Ls.bind(null,r),{hook:Is.bind(null,r)})};const ur="6.1.3",er=()=>{},qs=console.warn.bind(console),$s=console.error.bind(console),rr=`octokit-core.js/${ur} ${ee()}`;var X;let Vs=(X=class{constructor(r={}){P(this,"request");P(this,"graphql");P(this,"log");P(this,"hook");P(this,"auth");const t=new ns.Collection,n={baseUrl:ge.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},r.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};if(n.headers["user-agent"]=r.userAgent?`${r.userAgent} ${rr}`:rr,r.baseUrl&&(n.baseUrl=r.baseUrl),r.previews&&(n.mediaType.previews=r.previews),r.timeZone&&(n.headers["time-zone"]=r.timeZone),this.request=ge.defaults(n),this.graphql=Cs(this.request).defaults(n),this.log=Object.assign({debug:er,info:er,warn:qs,error:$s},r.log),this.hook=t,r.authStrategy){const{authStrategy:l,...c}=r,d=l(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:c},r.auth));t.wrap("request",d.hook),this.auth=d}else if(!r.auth)this.auth=async()=>({type:"unauthenticated"});else{const l=Ns(r.auth);t.wrap("request",l.hook),this.auth=l}const o=this.constructor;for(let l=0;l<o.plugins.length;++l)Object.assign(this,o.plugins[l](this,r))}static defaults(r){return class extends this{constructor(...n){const o=n[0]||{};if(typeof r=="function"){super(r(o));return}super(Object.assign({},r,o,o.userAgent&&r.userAgent?{userAgent:`${o.userAgent} ${r.userAgent}`}:null))}}}static plugin(...r){var o;const t=this.plugins;return o=class extends this{},P(o,"plugins",t.concat(r.filter(l=>!t.includes(l)))),o}},P(X,"VERSION",ur),P(X,"plugins",[]),X);var Bs="0.0.0-development";function Ws(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const t=e.data.incomplete_results,n=e.data.repository_selection,o=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const l=Object.keys(e.data)[0],c=e.data[l];return e.data=c,typeof t<"u"&&(e.data.incomplete_results=t),typeof n<"u"&&(e.data.repository_selection=n),e.data.total_count=o,e}function fe(e,r,t){const n=typeof r=="function"?r.endpoint(t):e.request.endpoint(r,t),o=typeof r=="function"?r:e.request,l=n.method,c=n.headers;let d=n.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!d)return{done:!0};try{const m=await o({method:l,url:d,headers:c}),T=Ws(m);return d=((T.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:T}}catch(m){if(m.status!==409)throw m;return d="",{value:{status:200,headers:{},data:[]}}}}})}}function lr(e,r,t,n){return typeof t=="function"&&(n=t,t=void 0),pr(e,[],fe(e,r,t)[Symbol.asyncIterator](),n)}function pr(e,r,t,n){return t.next().then(o=>{if(o.done)return r;let l=!1;function c(){l=!0}return r=r.concat(n?n(o.value,c):o.value.data),l?r:pr(e,r,t,n)})}Object.assign(lr,{iterator:fe});function dr(e){return{paginate:Object.assign(lr.bind(null,e),{iterator:fe.bind(null,e)})}}dr.VERSION=Bs;var Hs=(e,r)=>`The cursor at "${e.join(",")}" did not change its value "${r}" after a page transition. Please make sure your that your query is set up correctly.`,Ms=class extends Error{constructor(r,t){super(Hs(r.pathInQuery,t));P(this,"name","MissingCursorChangeError");this.pageInfo=r,this.cursorValue=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},zs=class extends Error{constructor(r){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(r,null,2)}`);P(this,"name","MissingPageInfo");this.response=r,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Ks=e=>Object.prototype.toString.call(e)==="[object Object]";function gr(e){const r=mr(e,"pageInfo");if(r.length===0)throw new zs(e);return r}var mr=(e,r,t=[])=>{for(const n of Object.keys(e)){const o=[...t,n],l=e[n];if(Ks(l)){if(l.hasOwnProperty(r))return o;const c=mr(l,r,o);if(c.length>0)return c}}return[]},Q=(e,r)=>r.reduce((t,n)=>t[n],e),ue=(e,r,t)=>{const n=r[r.length-1],o=[...r].slice(0,-1),l=Q(e,o);typeof t=="function"?l[n]=t(l[n]):l[n]=t},Qs=e=>{const r=gr(e);return{pathInQuery:r,pageInfo:Q(e,[...r,"pageInfo"])}},hr=e=>e.hasOwnProperty("hasNextPage"),Js=e=>hr(e)?e.endCursor:e.startCursor,Ys=e=>hr(e)?e.hasNextPage:e.hasPreviousPage,fr=e=>(r,t={})=>{let n=!0,o={...t};return{[Symbol.asyncIterator]:()=>({async next(){if(!n)return{done:!0,value:{}};const l=await e.graphql(r,o),c=Qs(l),d=Js(c.pageInfo);if(n=Ys(c.pageInfo),n&&d===o.cursor)throw new Ms(c,d);return o={...o,cursor:d},{done:!1,value:l}}})}},Xs=(e,r)=>{if(Object.keys(e).length===0)return Object.assign(e,r);const t=gr(e),n=[...t,"nodes"],o=Q(r,n);o&&ue(e,n,m=>[...m,...o]);const l=[...t,"edges"],c=Q(r,l);c&&ue(e,l,m=>[...m,...c]);const d=[...t,"pageInfo"];return ue(e,d,Q(r,d)),e},Zs=e=>{const r=fr(e);return async(t,n={})=>{let o={};for await(const l of r(t,n))o=Xs(o,l);return o}};function et(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(Zs(e),{iterator:fr(e)})})}}const rt="13.3.0",st={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addRepoAccessToSelfHostedRunnerGroupInOrg:["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubBillingUsageReportOrg:["GET /organizations/{org}/settings/billing/usage"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{commitAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"],createAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],createVariantAnalysis:["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"],deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],deleteCodeqlDatabase:["DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getAutofix:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],getVariantAnalysis:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"],getVariantAnalysisRepoTask:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codeSecurity:{attachConfiguration:["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"],attachEnterpriseConfiguration:["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"],createConfiguration:["POST /orgs/{org}/code-security/configurations"],createConfigurationForEnterprise:["POST /enterprises/{enterprise}/code-security/configurations"],deleteConfiguration:["DELETE /orgs/{org}/code-security/configurations/{configuration_id}"],deleteConfigurationForEnterprise:["DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],detachConfiguration:["DELETE /orgs/{org}/code-security/configurations/detach"],getConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}"],getConfigurationForRepository:["GET /repos/{owner}/{repo}/code-security-configuration"],getConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations"],getConfigurationsForOrg:["GET /orgs/{org}/code-security/configurations"],getDefaultConfigurations:["GET /orgs/{org}/code-security/configurations/defaults"],getDefaultConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/defaults"],getRepositoriesForConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"],getRepositoriesForEnterpriseConfiguration:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"],getSingleConfigurationForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],setConfigurationAsDefault:["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"],setConfigurationAsDefaultForEnterprise:["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"],updateConfiguration:["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"],updateEnterpriseConfiguration:["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],copilotMetricsForOrganization:["GET /orgs/{org}/copilot/metrics"],copilotMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],addSubIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],listSubIssues:["GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeSubIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"],reprioritizeSubIssue:["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"}],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}",{},{deprecated:"octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"}],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listAttestations:["GET /orgs/{org}/attestations/{subject_digest}"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers",{},{deprecated:"octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"}],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"}],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},privateRegistries:{createOrgPrivateRegistry:["POST /orgs/{org}/private-registries"],deleteOrgPrivateRegistry:["DELETE /orgs/{org}/private-registries/{secret_name}"],getOrgPrivateRegistry:["GET /orgs/{org}/private-registries/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/private-registries/public-key"],listOrgPrivateRegistries:["GET /orgs/{org}/private-registries"],updateOrgPrivateRegistry:["PATCH /orgs/{org}/private-registries/{secret_name}"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAttestation:["POST /repos/{owner}/{repo}/attestations"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAttestations:["GET /repos/{owner}/{repo}/attestations/{subject_digest}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{createPushProtectionBypass:["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"],getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],getScanHistory:["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getById:["GET /user/{account_id}"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listAttestations:["GET /users/{username}/attestations/{subject_digest}"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var tt=st;const L=new Map;for(const[e,r]of Object.entries(tt))for(const[t,n]of Object.entries(r)){const[o,l,c]=n,[d,m]=o.split(/ /),T=Object.assign({method:d,url:m},l);L.has(e)||L.set(e,new Map),L.get(e).set(t,{scope:e,methodName:t,endpointDefaults:T,decorations:c})}const ot={has({scope:e},r){return L.get(e).has(r)},getOwnPropertyDescriptor(e,r){return{value:this.get(e,r),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,r,t){return Object.defineProperty(e.cache,r,t),!0},deleteProperty(e,r){return delete e.cache[r],!0},ownKeys({scope:e}){return[...L.get(e).keys()]},set(e,r,t){return e.cache[r]=t},get({octokit:e,scope:r,cache:t},n){if(t[n])return t[n];const o=L.get(r).get(n);if(!o)return;const{endpointDefaults:l,decorations:c}=o;return c?t[n]=it(e,r,n,l,c):t[n]=e.request.defaults(l),t[n]}};function nt(e){const r={};for(const t of L.keys())r[t]=new Proxy({octokit:e,scope:t,cache:{}},ot);return r}function it(e,r,t,n,o){const l=e.request.defaults(n);function c(...d){let m=l.endpoint.merge(...d);if(o.mapToData)return m=Object.assign({},m,{data:m[o.mapToData],[o.mapToData]:void 0}),l(m);if(o.renamed){const[T,E]=o.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${T}.${E}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){const T=l.endpoint.merge(...d);for(const[E,b]of Object.entries(o.renamedParameters))E in T&&(e.log.warn(`"${E}" parameter is deprecated for "octokit.${r}.${t}()". Use "${b}" instead`),b in T||(T[b]=T[E]),delete T[E]);return l(T)}return l(...d)}return Object.assign(c,l)}function Er(e){return{rest:nt(e)}}Er.VERSION=rt;var Z={exports:{}},at=Z.exports,sr;function ct(){return sr||(sr=1,function(e,r){(function(t,n){e.exports=n()})(at,function(){var t=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof Ve<"u"?Ve:typeof self<"u"?self:{};function n(f){return f&&f.default||f}var o=function(f,i,s={}){var a,u,p;for(a in i)p=i[a],s[a]=(u=f[a])!=null?u:p;return s},l=function(f,i,s={}){var a,u;for(a in f)u=f[a],i[a]!==void 0&&(s[a]=u);return s},c={load:o,overwrite:l},d;d=class{constructor(i,s){this.incr=i,this.decr=s,this._first=null,this._last=null,this.length=0}push(i){var s;this.length++,typeof this.incr=="function"&&this.incr(),s={value:i,prev:this._last,next:null},this._last!=null?(this._last.next=s,this._last=s):this._first=this._last=s}shift(){var i;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),i=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,i}first(){if(this._first!=null)return this._first.value}getArray(){var i,s,a;for(i=this._first,a=[];i!=null;)a.push((s=i,i=i.next,s.value));return a}forEachShift(i){var s;for(s=this.shift();s!=null;)i(s),s=this.shift()}debug(){var i,s,a,u,p;for(i=this._first,p=[];i!=null;)p.push((s=i,i=i.next,{value:s.value,prev:(a=s.prev)!=null?a.value:void 0,next:(u=s.next)!=null?u.value:void 0}));return p}};var m=d,T;T=class{constructor(i){if(this.instance=i,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(s,a)=>this._addListener(s,"many",a),this.instance.once=(s,a)=>this._addListener(s,"once",a),this.instance.removeAllListeners=(s=null)=>s!=null?delete this._events[s]:this._events={}}_addListener(i,s,a){var u;return(u=this._events)[i]==null&&(u[i]=[]),this._events[i].push({cb:a,status:s}),this.instance}listenerCount(i){return this._events[i]!=null?this._events[i].length:0}async trigger(i,...s){var a,u;try{return i!=="debug"&&this.trigger("debug",`Event triggered: ${i}`,s),this._events[i]==null?void 0:(this._events[i]=this._events[i].filter(function(p){return p.status!=="none"}),u=this._events[i].map(async p=>{var g,h;if(p.status!=="none"){p.status==="once"&&(p.status="none");try{return h=typeof p.cb=="function"?p.cb(...s):void 0,typeof(h!=null?h.then:void 0)=="function"?await h:h}catch(y){return g=y,this.trigger("error",g),null}}}),(await Promise.all(u)).find(function(p){return p!=null}))}catch(p){return a=p,this.trigger("error",a),null}}};var E=T,b,k,w;b=m,k=E,w=class{constructor(i){this.Events=new k(this),this._length=0,this._lists=(function(){var s,a,u;for(u=[],s=1,a=i;1<=a?s<=a:s>=a;1<=a?++s:--s)u.push(new b(()=>this.incr(),()=>this.decr()));return u}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(i){return this._lists[i.options.priority].push(i)}queued(i){return i!=null?this._lists[i].length:this._length}shiftAll(i){return this._lists.forEach(function(s){return s.forEachShift(i)})}getFirst(i=this._lists){var s,a,u;for(s=0,a=i.length;s<a;s++)if(u=i[s],u.length>0)return u;return[]}shiftLastFrom(i){return this.getFirst(this._lists.slice(i).reverse()).shift()}};var C=w,A;A=class extends Error{};var v=A,G,S,J,B,W;B=10,S=5,W=c,G=v,J=class{constructor(i,s,a,u,p,g,h,y){this.task=i,this.args=s,this.rejectOnDrop=p,this.Events=g,this._states=h,this.Promise=y,this.options=W.load(a,u),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===u.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((R,O)=>{this._resolve=R,this._reject=O}),this.retryCount=0}_sanitizePriority(i){var s;return s=~~i!==i?S:i,s<0?0:s>B-1?B-1:s}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:i,message:s="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(i??new G(s)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(i){var s;if(s=this._states.jobStatus(this.options.id),!(s===i||i==="DONE"&&s===null))throw new G(`Invalid job status ${s}, expected ${i}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(i,s){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:i,blocked:s})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(i,s,a,u){var p,g,h;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),g={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",g);try{if(h=await(i!=null?i.schedule(this.options,this.task,...this.args):this.task(...this.args)),s())return this.doDone(g),await u(this.options,g),this._assertStatus("DONE"),this._resolve(h)}catch(y){return p=y,this._onFailure(p,g,s,a,u)}}doExpire(i,s,a){var u,p;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),p={args:this.args,options:this.options,retryCount:this.retryCount},u=new G(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(u,p,i,s,a)}async _onFailure(i,s,a,u,p){var g,h;if(a())return g=await this.Events.trigger("failed",i,s),g!=null?(h=~~g,this.Events.trigger("retry",`Retrying ${this.options.id} after ${h} ms`,s),this.retryCount++,u(h)):(this.doDone(s),await p(this.options,s),this._assertStatus("DONE"),this._reject(i))}doDone(i){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",i)}};var U=J,x,re,se;se=c,x=v,re=class{constructor(i,s,a){this.instance=i,this.storeOptions=s,this.clientId=this.instance._randomIndex(),se.load(a,a,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var i;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(i=this.heartbeat=setInterval(()=>{var s,a,u,p,g;if(p=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&p>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=p,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&p>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:s,reservoirIncreaseMaximum:u,reservoir:g}=this.storeOptions,this._lastReservoirIncrease=p,a=u!=null?Math.min(s,u-g):s,a>0))return this.storeOptions.reservoir+=a,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?i.unref():void 0:clearInterval(this.heartbeat)}async __publish__(i){return await this.yieldLoop(),this.instance.Events.trigger("message",i.toString())}async __disconnect__(i){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(i=0){return new this.Promise(function(s,a){return setTimeout(s,i)})}computePenalty(){var i;return(i=this.storeOptions.penalty)!=null?i:15*this.storeOptions.minTime||5e3}async __updateSettings__(i){return await this.yieldLoop(),se.overwrite(i,i,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(i){return await this.yieldLoop(),this._nextRequest+this.timeout<i}computeCapacity(){var i,s;return{maxConcurrent:i,reservoir:s}=this.storeOptions,i!=null&&s!=null?Math.min(i-this._running,s):i!=null?i-this._running:s??null}conditionsCheck(i){var s;return s=this.computeCapacity(),s==null||i<=s}async __incrementReservoir__(i){var s;return await this.yieldLoop(),s=this.storeOptions.reservoir+=i,this.instance._drainAll(this.computeCapacity()),s}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(i){return this._unblockTime>=i}check(i,s){return this.conditionsCheck(i)&&this._nextRequest-s<=0}async __check__(i){var s;return await this.yieldLoop(),s=Date.now(),this.check(i,s)}async __register__(i,s,a){var u,p;return await this.yieldLoop(),u=Date.now(),this.conditionsCheck(s)?(this._running+=s,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=s),p=Math.max(this._nextRequest-u,0),this._nextRequest=u+p+this.storeOptions.minTime,{success:!0,wait:p,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(i,s){var a,u,p;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&s>this.storeOptions.maxConcurrent)throw new x(`Impossible to add a job having a weight of ${s} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return u=Date.now(),p=this.storeOptions.highWater!=null&&i===this.storeOptions.highWater&&!this.check(s,u),a=this.strategyIsBlock()&&(p||this.isBlocked(u)),a&&(this._unblockTime=u+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:p,blocked:a,strategy:this.storeOptions.strategy}}async __free__(i,s){return await this.yieldLoop(),this._running-=s,this._done+=s,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var yr=re,Te,_e;Te=v,_e=class{constructor(i){this.status=i,this._jobs={},this.counts=this.status.map(function(){return 0})}next(i){var s,a;if(s=this._jobs[i],a=s+1,s!=null&&a<this.status.length)return this.counts[s]--,this.counts[a]++,this._jobs[i]++;if(s!=null)return this.counts[s]--,delete this._jobs[i]}start(i){var s;return s=0,this._jobs[i]=s,this.counts[s]++}remove(i){var s;return s=this._jobs[i],s!=null&&(this.counts[s]--,delete this._jobs[i]),s!=null}jobStatus(i){var s;return(s=this.status[this._jobs[i]])!=null?s:null}statusJobs(i){var s,a,u,p,g;if(i!=null){if(a=this.status.indexOf(i),a<0)throw new Te(`status must be one of ${this.status.join(", ")}`);u=this._jobs,p=[];for(s in u)g=u[s],g===a&&p.push(s);return p}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((i,s,a)=>(i[this.status[a]]=s,i),{})}};var vr=_e,be,we;be=m,we=class{constructor(i,s){this.schedule=this.schedule.bind(this),this.name=i,this.Promise=s,this._running=0,this._queue=new be}isEmpty(){return this._queue.length===0}async _tryToRun(){var i,s,a,u,p,g,h;if(this._running<1&&this._queue.length>0)return this._running++,{task:h,args:i,resolve:p,reject:u}=this._queue.shift(),s=await async function(){try{return g=await h(...i),function(){return p(g)}}catch(y){return a=y,function(){return u(a)}}}(),this._running--,this._tryToRun(),s()}schedule(i,...s){var a,u,p;return p=u=null,a=new this.Promise(function(g,h){return p=g,u=h}),this._queue.push({task:i,args:s,resolve:p,reject:u}),this._tryToRun(),a}};var kr=we,ye="2.19.5",Pr={version:ye},Gr=Object.freeze({version:ye,default:Pr}),ve=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),ke=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Rr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Pe,Ge,Re,Oe,Ae,Y;Y=c,Pe=E,Oe=ve,Re=ke,Ae=Rr,Ge=(function(){class f{constructor(s={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=s,Y.load(this.limiterOptions,this.defaults,this),this.Events=new Pe(this),this.instances={},this.Bottleneck=qe,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new Oe(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new Re(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(s=""){var a;return(a=this.instances[s])!=null?a:(()=>{var u;return u=this.instances[s]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${s}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",u,s),u})()}async deleteKey(s=""){var a,u;return u=this.instances[s],this.connection&&(a=await this.connection.__runCommand__(["del",...Ae.allKeys(`${this.id}-${s}`)])),u!=null&&(delete this.instances[s],await u.disconnect()),u!=null||a>0}limiters(){var s,a,u,p;a=this.instances,u=[];for(s in a)p=a[s],u.push({key:s,limiter:p});return u}keys(){return Object.keys(this.instances)}async clusterKeys(){var s,a,u,p,g,h,y,R,O;if(this.connection==null)return this.Promise.resolve(this.keys());for(h=[],s=null,O=`b_${this.id}-`.length,a=9;s!==0;)for([R,u]=await this.connection.__runCommand__(["scan",s??0,"match",`b_${this.id}-*_settings`,"count",1e4]),s=~~R,p=0,y=u.length;p<y;p++)g=u[p],h.push(g.slice(O,-a));return h}_startAutoCleanup(){var s;return clearInterval(this.interval),typeof(s=this.interval=setInterval(async()=>{var a,u,p,g,h,y;h=Date.now(),p=this.instances,g=[];for(u in p){y=p[u];try{await y._store.__groupCheck__(h)?g.push(this.deleteKey(u)):g.push(void 0)}catch(R){a=R,g.push(y.Events.trigger("error",a))}}return g},this.timeout/2)).unref=="function"?s.unref():void 0}updateSettings(s={}){if(Y.overwrite(s,this.defaults,this),Y.overwrite(s,s,this.limiterOptions),s.timeout!=null)return this._startAutoCleanup()}disconnect(s=!0){var a;if(!this.sharedConnection)return(a=this.connection)!=null?a.disconnect(s):void 0}}return f.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},f}).call(t);var Or=Ge,Se,Fe,Ce;Ce=c,Fe=E,Se=(function(){class f{constructor(s={}){this.options=s,Ce.load(this.options,this.defaults,this),this.Events=new Fe(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((s,a)=>this._resolve=s)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(s){var a;return this._arr.push(s),a=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),a}}return f.prototype.defaults={maxTime:null,maxSize:null,Promise},f}).call(t);var Ar=Se,Sr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Fr=n(Gr),Ue,De,te,oe,je,ne,Le,xe,Ie,ie,F,Ne=[].splice;ne=10,De=5,F=c,Le=C,oe=U,je=yr,xe=Sr,te=E,Ie=vr,ie=kr,Ue=(function(){class f{constructor(s={},...a){var u,p;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(s,a),F.load(s,this.instanceDefaults,this),this._queues=new Le(ne),this._scheduled={},this._states=new Ie(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new te(this),this._submitLock=new ie("submit",this.Promise),this._registerLock=new ie("register",this.Promise),p=F.load(s,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return u=F.load(s,this.redisStoreDefaults,{}),new xe(this,p,u);if(this.datastore==="local")return u=F.load(s,this.localStoreDefaults,{}),new je(this,p,u);throw new f.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var g;return(g=this._store.heartbeat)!=null&&typeof g.ref=="function"?g.ref():void 0}),this._queues.on("zero",()=>{var g;return(g=this._store.heartbeat)!=null&&typeof g.unref=="function"?g.unref():void 0})}_validateOptions(s,a){if(!(s!=null&&typeof s=="object"&&a.length===0))throw new f.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(s){return this._store.__publish__(s)}disconnect(s=!0){return this._store.__disconnect__(s)}chain(s){return this._limiter=s,this}queued(s){return this._queues.queued(s)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(s){return this._states.jobStatus(s)}jobs(s){return this._states.statusJobs(s)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(s=1){return this._store.__check__(s)}_clearGlobalState(s){return this._scheduled[s]!=null?(clearTimeout(this._scheduled[s].expiration),delete this._scheduled[s],!0):!1}async _free(s,a,u,p){var g,h;try{if({running:h}=await this._store.__free__(s,u.weight),this.Events.trigger("debug",`Freed ${u.id}`,p),h===0&&this.empty())return this.Events.trigger("idle")}catch(y){return g=y,this.Events.trigger("error",g)}}_run(s,a,u){var p,g,h;return a.doRun(),p=this._clearGlobalState.bind(this,s),h=this._run.bind(this,s,a),g=this._free.bind(this,s,a),this._scheduled[s]={timeout:setTimeout(()=>a.doExecute(this._limiter,p,h,g),u),expiration:a.options.expiration!=null?setTimeout(function(){return a.doExpire(p,h,g)},u+a.options.expiration):void 0,job:a}}_drainOne(s){return this._registerLock.schedule(()=>{var a,u,p,g,h;return this.queued()===0?this.Promise.resolve(null):(h=this._queues.getFirst(),{options:g,args:a}=p=h.first(),s!=null&&g.weight>s?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${g.id}`,{args:a,options:g}),u=this._randomIndex(),this._store.__register__(u,g.weight,g.expiration).then(({success:y,wait:R,reservoir:O})=>{var H;return this.Events.trigger("debug",`Drained ${g.id}`,{success:y,args:a,options:g}),y?(h.shift(),H=this.empty(),H&&this.Events.trigger("empty"),O===0&&this.Events.trigger("depleted",H),this._run(u,p,R),this.Promise.resolve(g.weight)):this.Promise.resolve(null)})))})}_drainAll(s,a=0){return this._drainOne(s).then(u=>{var p;return u!=null?(p=s!=null?s-u:s,this._drainAll(p,a+u)):this.Promise.resolve(a)}).catch(u=>this.Events.trigger("error",u))}_dropAllQueued(s){return this._queues.shiftAll(function(a){return a.doDrop({message:s})})}stop(s={}){var a,u;return s=F.load(s,this.stopDefaults),u=p=>{var g;return g=()=>{var h;return h=this._states.counts,h[0]+h[1]+h[2]+h[3]===p},new this.Promise((h,y)=>g()?h():this.on("done",()=>{if(g())return this.removeAllListeners("done"),h()}))},a=s.dropWaitingJobs?(this._run=function(p,g){return g.doDrop({message:s.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var p,g,h;g=this._scheduled;for(p in g)h=g[p],this.jobStatus(h.job.options.id)==="RUNNING"&&(clearTimeout(h.timeout),clearTimeout(h.expiration),h.job.doDrop({message:s.dropErrorMessage}));return this._dropAllQueued(s.dropErrorMessage),u(0)}))):this.schedule({priority:ne-1,weight:0},()=>u(1)),this._receive=function(p){return p._reject(new f.prototype.BottleneckError(s.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new f.prototype.BottleneckError("stop() has already been called")),a}async _addToQueue(s){var a,u,p,g,h,y,R;({args:a,options:g}=s);try{({reachedHWM:h,blocked:u,strategy:R}=await this._store.__submit__(this.queued(),g.weight))}catch(O){return p=O,this.Events.trigger("debug",`Could not queue ${g.id}`,{args:a,options:g,error:p}),s.doDrop({error:p}),!1}return u?(s.doDrop(),!0):h&&(y=R===f.prototype.strategy.LEAK?this._queues.shiftLastFrom(g.priority):R===f.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(g.priority+1):R===f.prototype.strategy.OVERFLOW?s:void 0,y!=null&&y.doDrop(),y==null||R===f.prototype.strategy.OVERFLOW)?(y==null&&s.doDrop(),h):(s.doQueue(h,u),this._queues.push(s),await this._drainAll(),h)}_receive(s){return this._states.jobStatus(s.options.id)!=null?(s._reject(new f.prototype.BottleneckError(`A job with the same id already exists (id=${s.options.id})`)),!1):(s.doReceive(),this._submitLock.schedule(this._addToQueue,s))}submit(...s){var a,u,p,g,h,y,R;return typeof s[0]=="function"?(h=s,[u,...s]=h,[a]=Ne.call(s,-1),g=F.load({},this.jobDefaults)):(y=s,[g,u,...s]=y,[a]=Ne.call(s,-1),g=F.load(g,this.jobDefaults)),R=(...O)=>new this.Promise(function(H,Ur){return u(...O,function(...$e){return($e[0]!=null?Ur:H)($e)})}),p=new oe(R,s,g,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),p.promise.then(function(O){return typeof a=="function"?a(...O):void 0}).catch(function(O){return Array.isArray(O)?typeof a=="function"?a(...O):void 0:typeof a=="function"?a(O):void 0}),this._receive(p)}schedule(...s){var a,u,p;return typeof s[0]=="function"?([p,...s]=s,u={}):[u,p,...s]=s,a=new oe(p,s,u,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(a),a.promise}wrap(s){var a,u;return a=this.schedule.bind(this),u=function(...p){return a(s.bind(this),...p)},u.withOptions=function(p,...g){return a(p,s,...g)},u}async updateSettings(s={}){return await this._store.__updateSettings__(F.overwrite(s,this.storeDefaults)),F.overwrite(s,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(s=0){return this._store.__incrementReservoir__(s)}}return f.default=f,f.Events=te,f.version=f.prototype.version=Fr.version,f.strategy=f.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},f.BottleneckError=f.prototype.BottleneckError=v,f.Group=f.prototype.Group=Or,f.RedisConnection=f.prototype.RedisConnection=ve,f.IORedisConnection=f.prototype.IORedisConnection=ke,f.Batcher=f.prototype.Batcher=Ar,f.prototype.jobDefaults={priority:De,weight:1,expiration:null,id:"<no-id>"},f.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:f.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},f.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},f.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},f.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},f.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},f}).call(t);var qe=Ue,Cr=qe;return Cr})}(Z)),Z.exports}var ut=ct();const Tr=Lr(ut);var lt="0.0.0-development";async function _r(e,r,t,n){if(!t.request||!t.request.request)throw t;if(t.status>=400&&!e.doNotRetry.includes(t.status)){const o=n.request.retries!=null?n.request.retries:e.retries,l=Math.pow((n.request.retryCount||0)+1,2);throw r.retry.retryRequest(t,o,l)}throw t}async function pt(e,r,t,n){const o=new Tr;return o.on("failed",function(l,c){const d=~~l.request.request.retries,m=~~l.request.request.retryAfter;if(n.request.retryCount=c.retryCount+1,d>c.retryCount)return m*e.retryAfterBaseValue}),o.schedule(dt.bind(null,e,r,t),n)}async function dt(e,r,t,n){const o=await t(t,n);if(o.data&&o.data.errors&&o.data.errors.length>0&&/Something went wrong while executing your query/.test(o.data.errors[0].message)){const l=new z(o.data.errors[0].message,500,{request:n,response:o});return _r(e,r,l,n)}return o}function br(e,r){const t=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},r.retry);return t.enabled&&(e.hook.error("request",_r.bind(null,t,e)),e.hook.wrap("request",pt.bind(null,t,e))),{retry:{retryRequest:(n,o,l)=>(n.request.request=Object.assign({},n.request.request,{retries:o,retryAfter:l}),n)}}}br.VERSION=lt;var gt="0.0.0-development",le=()=>Promise.resolve();function mt(e,r,t){return e.retryLimiter.schedule(ht,e,r,t)}async function ht(e,r,t){const n=t.method!=="GET"&&t.method!=="HEAD",{pathname:o}=new URL(t.url,"http://github.test"),l=t.method==="GET"&&o.startsWith("/search/"),c=o.startsWith("/graphql"),m=~~r.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(m.expiration=1e3*60),(n||c)&&await e.write.key(e.id).schedule(m,le),n&&e.triggersNotification(o)&&await e.notifications.key(e.id).schedule(m,le),l&&await e.search.key(e.id).schedule(m,le);const T=e.global.key(e.id).schedule(m,r,t);if(c){const E=await T;if(E.data.errors!=null&&E.data.errors.some(b=>b.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:E,data:E.data})}return T}var ft=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/issues/{issue_number}/sub_issue","/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function Et(e){const t=`^(?:${e.map(n=>n.split("/").map(o=>o.startsWith("{")?"(?:.+?)":o).join("/")).map(n=>`(?:${n})`).join("|")})[^/]*$`;return new RegExp(t,"i")}var tr=Et(ft),wr=tr.test.bind(tr),V={},Tt=function(e,r){V.global=new e.Group({id:"octokit-global",maxConcurrent:10,...r}),V.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...r}),V.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...r}),V.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...r})};function Ee(e,r){const{enabled:t=!0,Bottleneck:n=Tr,id:o="no-id",timeout:l=1e3*60*2,connection:c}=r.throttle||{};if(!t)return{};const d={timeout:l};typeof c<"u"&&(d.connection=c),V.global==null&&Tt(n,d);const m=Object.assign({clustering:c!=null,triggersNotification:wr,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new n,id:o,...V},r.throttle);if(typeof m.onSecondaryRateLimit!="function"||typeof m.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const T={},E=new n.Events(T);return T.on("secondary-limit",m.onSecondaryRateLimit),T.on("rate-limit",m.onRateLimit),T.on("error",b=>e.log.warn("Error in throttling-plugin limit handler",b)),m.retryLimiter.on("failed",async function(b,k){const[w,C,A]=k.args,{pathname:v}=new URL(A.url,"http://github.test");if(!(v.startsWith("/graphql")&&b.status!==401||b.status===403||b.status===429))return;const S=~~C.retryCount;C.retryCount=S,A.request.retryCount=S;const{wantRetry:J,retryAfter:B=0}=await async function(){var W;if(/\bsecondary rate\b/i.test(b.message)){const U=Number(b.response.headers["retry-after"])||w.fallbackSecondaryRateRetryAfter;return{wantRetry:await E.trigger("secondary-limit",U,A,e,S),retryAfter:U}}if(b.response.headers!=null&&b.response.headers["x-ratelimit-remaining"]==="0"||(((W=b.response.data)==null?void 0:W.errors)??[]).some(U=>U.type==="RATE_LIMITED")){const U=new Date(~~b.response.headers["x-ratelimit-reset"]*1e3).getTime(),x=Math.max(Math.ceil((U-Date.now())/1e3)+1,0);return{wantRetry:await E.trigger("rate-limit",x,A,e,S),retryAfter:x}}return{}}();if(J)return C.retryCount++,B*w.retryAfterBaseValue}),e.hook.wrap("request",mt.bind(null,m)),{}}Ee.VERSION=gt;Ee.triggersNotification=wr;var _t="0.0.0-development",bt=Vs.plugin(Er,dr,et,br,Ee).defaults({userAgent:`octokit.js/${_t}`,throttle:{onRateLimit:wt,onSecondaryRateLimit:yt}});function wt(e,r,t){if(t.log.warn(`Request quota exhausted for request ${r.method} ${r.url}`),r.request.retryCount===0)return t.log.info(`Retrying after ${e} seconds!`),!0}function yt(e,r,t){if(t.log.warn(`SecondaryRateLimit detected for request ${r.method} ${r.url}`),r.request.retryCount===0)return t.log.info(`Retrying after ${e} seconds!`),!0}const vt=new bt,kt=async e=>{try{return(await vt.request("GET /users/{username}/repos",{username:e,sort:"updated",per_page:100,headers:{"X-GitHub-Api-Version":"2022-11-28"}})).data.filter(t=>!t.fork&&!t.archived&&!t.private).map(t=>({id:t.id,name:t.name,description:t.description,url:t.html_url,homepage:t.homepage,stars:t.stargazers_count,forks:t.forks_count,language:t.language,updatedAt:Yr(new Date(t.updated_at),"MMM dd, yyyy"),topics:t.topics||[]}))}catch(r){return console.error("Error fetching GitHub repositories:",r),[]}},qt=()=>{const[e,r]=j.useState([]),[t,n]=j.useState(!0),[o,l]=j.useState(null);return j.useEffect(()=>{(async()=>{try{n(!0);const T=[...(await kt("efeertugrul")).map(E=>({...E,featured:!1}))].sort((E,b)=>E.featured&&!b.featured?-1:!E.featured&&b.featured?1:0);r(T)}catch(d){l(d.message)}finally{n(!1)}})()},[]),_.jsxDEV(xr,{children:_.jsxDEV(Kr,{maxWidth:"lg",sx:{py:4},children:[_.jsxDEV(D,{variant:"h3",component:"h1",gutterBottom:!0,sx:{mb:4,color:"primary.main",textAlign:"center",fontWeight:"bold"},children:"My Projects"},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/pages/Portfolio.jsx",lineNumber:42,columnNumber:9},void 0),t&&_.jsxDEV(K,{sx:{width:"100%",mb:4},children:_.jsxDEV(Qr,{},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/pages/Portfolio.jsx",lineNumber:58,columnNumber:13},void 0)},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/pages/Portfolio.jsx",lineNumber:57,columnNumber:11},void 0),o&&_.jsxDEV(Jr,{severity:"error",sx:{mb:4},children:o},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/pages/Portfolio.jsx",lineNumber:63,columnNumber:11},void 0),!t&&!o&&_.jsxDEV(es,{repositories:e},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/pages/Portfolio.jsx",lineNumber:69,columnNumber:11},void 0)]},void 0,!0,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/pages/Portfolio.jsx",lineNumber:41,columnNumber:7},void 0)},void 0,!1,{fileName:"/Users/efeertugrul/workspace/efeertugrul.github.io/src/pages/Portfolio.jsx",lineNumber:40,columnNumber:5},void 0)};export{qt as default};
